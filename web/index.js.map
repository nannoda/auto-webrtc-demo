{
  "version": 3,
  "sources": ["consts.ts", "index.ts"],
  "sourcesContent": ["export const REMOTE_ID_API = \"/api/remoteId\";", "import { REMOTE_ID_API } from \"./consts\";\r\n\r\nasync function getText(url: string) {\r\n    const response = await fetch(url);\r\n    return await response.text();\r\n}\r\nconsole.log(\"3\");\r\n\r\nasync function postRemoteId(localId: string) {\r\n\r\n    const response = await fetch(REMOTE_ID_API, {\r\n        method: \"POST\",\r\n        body: localId\r\n    });\r\n    console.log(response);\r\n}\r\n\r\n\r\nasync function main() {\r\n\r\n\r\n    const peerConnection = new RTCPeerConnection({\r\n        iceServers: [\r\n            {\r\n                urls: \"stun:stun.l.google.com:19302\"\r\n            }\r\n        ]\r\n    });\r\n\r\n    const setSession = (base64Str: string) => {\r\n        const session = JSON.parse(atob(base64Str));\r\n        peerConnection.setRemoteDescription(session);\r\n    }\r\n    (window as any).setSession = setSession;\r\n\r\n    const sendChannel = peerConnection.createDataChannel(\"sendChannel\");\r\n    sendChannel.onopen = () => {\r\n        console.log(\"sendChannel open\");\r\n    }\r\n\r\n    sendChannel.onmessage = (event) => {\r\n        console.log(`type: ${typeof event.data}`);\r\n\r\n        console.log(\"sendChannel message: \" + event.data);\r\n    }\r\n\r\n    sendChannel.onclose = () => {\r\n        console.log(\"sendChannel close\");\r\n    }\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate) {\r\n            console.log(\"candidate: \" + event.candidate.candidate);\r\n        } else {\r\n            console.log(\"candidate: null\");\r\n            if (peerConnection.localDescription) {\r\n                const localId = btoa(JSON.stringify(peerConnection.localDescription));\r\n                console.log(\"localDescription: \" + localId);\r\n                postRemoteId(localId);\r\n            }\r\n        }\r\n    }\r\n\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n\r\n}\r\n\r\nmain();"],
  "mappings": ";;AAAO,MAAM,gBAAgB;;;ACM7B,UAAQ,IAAI,GAAG;AAEf,iBAAe,aAAa,SAAiB;AAEzC,UAAM,WAAW,MAAM,MAAM,eAAe;AAAA,MACxC,QAAQ;AAAA,MACR,MAAM;AAAA,IACV,CAAC;AACD,YAAQ,IAAI,QAAQ;AAAA,EACxB;AAGA,iBAAe,OAAO;AAGlB,UAAM,iBAAiB,IAAI,kBAAkB;AAAA,MACzC,YAAY;AAAA,QACR;AAAA,UACI,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,UAAM,aAAa,CAAC,cAAsB;AACtC,YAAM,UAAU,KAAK,MAAM,KAAK,SAAS,CAAC;AAC1C,qBAAe,qBAAqB,OAAO;AAAA,IAC/C;AACA,IAAC,OAAe,aAAa;AAE7B,UAAM,cAAc,eAAe,kBAAkB,aAAa;AAClE,gBAAY,SAAS,MAAM;AACvB,cAAQ,IAAI,kBAAkB;AAAA,IAClC;AAEA,gBAAY,YAAY,CAAC,UAAU;AAC/B,cAAQ,IAAI,SAAS,OAAO,MAAM,MAAM;AAExC,cAAQ,IAAI,0BAA0B,MAAM,IAAI;AAAA,IACpD;AAEA,gBAAY,UAAU,MAAM;AACxB,cAAQ,IAAI,mBAAmB;AAAA,IACnC;AAEA,mBAAe,iBAAiB,CAAC,UAAU;AACvC,UAAI,MAAM,WAAW;AACjB,gBAAQ,IAAI,gBAAgB,MAAM,UAAU,SAAS;AAAA,MACzD,OAAO;AACH,gBAAQ,IAAI,iBAAiB;AAC7B,YAAI,eAAe,kBAAkB;AACjC,gBAAM,UAAU,KAAK,KAAK,UAAU,eAAe,gBAAgB,CAAC;AACpE,kBAAQ,IAAI,uBAAuB,OAAO;AAC1C,uBAAa,OAAO;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,QAAQ,MAAM,eAAe,YAAY;AAC/C,UAAM,eAAe,oBAAoB,KAAK;AAAA,EAElD;AAEA,OAAK;",
  "names": []
}
